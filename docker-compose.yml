version: "3.9"

volumes:
  minio_data:
  minio_artifacts:
    name: minio_artifacts
  airflow_data:
  mlflow_data:
    # MLflow 데이터 저장용

services:
  # ──────────────────────────────── MinIO ────────────────────────────────
  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9090"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-password}
    volumes:
      - ./minio:/data
    ports:
      - "9000:9000"
      - "9090:9090"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  # ──────────────────────────────── MLflow ────────────────────────────────
  mlflow:
    build: ./mlflow # Dockerfile 사용
    container_name: mlflow
    # command 삭제 (Dockerfile의 CMD 사용)
    environment:
      AWS_ACCESS_KEY_ID: admin
      AWS_SECRET_ACCESS_KEY: password
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
    volumes:
      - mlflow_data:/mlflow
    ports:
      - "5000:5000"
    depends_on:
      minio: { condition: service_healthy }
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ──────────────────────────────── BackendTrain ────────────────────────────────
  backendtrain:
    build:
      context: ./backendTrain
      dockerfile: Dockerfile
    image: mlops-project-server-dl_airflow_mlflow_compose-backendtrain:latest
    command: echo "BackendTrain image built successfully"
    profiles: [ "build-only" ]

  # ──────────────────────────────── Airflow ──────────────────────────────
  airflow-init:
    image: mlops-airflow:latest
    entrypoint: >
      bash -c "
        airflow db upgrade &&
        airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com || true
      "
    depends_on:
      minio: { condition: service_healthy }
      mlflow: { condition: service_healthy }
    environment:
      - PYTHONPATH=/opt/airflow/src
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - airflow_data:/opt/airflow
      - ./airflow/dags:/opt/airflow/dags
      - ./backendTrain/src:/opt/airflow/src
      - ./backendTrain/data:/opt/airflow/data
      - minio_artifacts:/ml-artifacts

  airflow-web:
    build: ./airflow
    image: mlops-airflow:latest
    container_name: airflow-web
    command: airflow webserver
    depends_on:
      minio: { condition: service_healthy }
      mlflow: { condition: service_healthy }
      airflow-init: { condition: service_completed_successfully }
    environment:
      - PYTHONPATH=/opt/airflow/src
      - HOST_PROJECT_ROOT=${PWD}
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    ports:
      - "8080:8080"
    volumes:
      - airflow_data:/opt/airflow
      - ./airflow/dags:/opt/airflow/dags
      - ./backendTrain/src:/opt/airflow/src
      - ./backendTrain/data:/opt/airflow/data
      - minio_artifacts:/ml-artifacts
      - /var/run/docker.sock:/var/run/docker.sock

  airflow-scheduler:
    image: mlops-airflow:latest
    container_name: airflow-scheduler
    command: airflow scheduler
    depends_on:
      minio: { condition: service_healthy }
      mlflow: { condition: service_healthy }
      airflow-init: { condition: service_completed_successfully }
    environment:
      - PYTHONPATH=/opt/airflow/src
      - HOST_PROJECT_ROOT=${PWD}
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - airflow_data:/opt/airflow
      - ./airflow/dags:/opt/airflow/dags
      - ./backendTrain/src:/opt/airflow/src
      - ./backendTrain/data:/opt/airflow/data
      - minio_artifacts:/ml-artifacts
      - /var/run/docker.sock:/var/run/docker.sock
